---
layout: post
title: “operating system structure”
date: 2022-08-02 22:30:00 +0530
categories: OperatingSystem OS Structure
---

<br>

## 1. 커널과 인터페이스
커널(*kernel*)은 프로세스 관리, 메모리 관리, 저장장치 관리와 같은 운영체제의 핵심적인 기능을 모아놓은 것으로 운영체제의 성능은 커널이 좌우한다. <br>
인터페이스는 커널에 사용자의 명령을 전달하고 실행 결과를 사용자에게 알려주는 역할을 한다.
유닉스의 사용자 인터페이스는 셸(*shell*)이라고 하며 C셸(*csh*), T셸(*tsh*), 배시셸(bash) 등 여러 종류의 셸이 있다. <br>

## 2. 시스템 호출과 디바이스 드라이버
### 2.1 시스템 호출
시스템 호출(system call)은 커널이 자신을 보호하기 위해 만든 인터페이스이다. 커널은 사용자나 응용 프로그램으로부터 컴퓨터 자원을 보호하기 위해 자원에 직접 접근하는 것을 차단하기 때문에 자원을 이용하려면 시스템 호출이라는 인터페이스를 이용하여 접근해야 한다. <br>
**응용 프로그램 입장에서 직접호출과 시스템 호출을 통한 접근 차이** <br>
- **직접접근**: 두 응용 프로그램이 자기 마음에 드는 위치에 데이터를 저장하려 할 것이다. 이 경우 다른 사람의 데이터를 지울 수도 있고 내 데이터가 다른 사람에 의해 지워질 수도 있다. <br>
- **시스템 호출을 통한 접근**: 응용 프로그램이 직접 하드디스크에 데이터를 저장하지 않고 커널이 제공하는 write() 함수를 사용하여 데이터를 저장해달라고 요청한다. 응용 프로그램은 데이터가 하드디스크의 어느 위치에 어떤 방식으로 저장되는지 알 수 없다. 만약 자신이 저장한 데이터를 읽고 싶다면 read() 함수로 시스템 호출을 이용하여 가져오면 된다. 시스템 호출을 이용하면 커널이 데이터를 가져오거나 저장하는 것을 전적으로 책임지기 때문에 컴퓨터 자원을 관리하기가 수월하다. <br>

**정리** <br>
- 시스템 호출은 커널이 제공하는 시스템 자원의 사용과 연관된 함수이다.
- 응용 프로그램이 하드웨어 자원에 접근하거나 운영체제가 제공하는 서비스를 이용하려 할 때는 시스템 호출을 사용해야 한다.
- 운영체제는 커널이 제공하는 서비스를 시스템 호출로 제한하고 다른 방법으로 커널에 들어오지 못하게 막음으로써 컴퓨터 자원을 보호한다.
- 시스템 호출은 커널이 제공하는 서비스를 이용하기 위한 인터페이스이며, 사용자가 자발적으로 커널 영역에 진입할 수 있는 유일한 수단이다.
<br>

### 2.2 드라이버
응용 프로그램과 커널의 인터페이스가 시스템 호출이라면 커널과 하드웨어의 인터페이스는 드라이버(*driver*)가 담당한다. 커널은 입출력의 기본적인 부분만 제작ㅎ나고, 하드웨어의 특성을 반영한 소프트웨어를 하드웨어 제작자에게 받아 커널이 실행될 때 함께 실행되도록 한다. 이때 하드웨어 제작자가 만든 소프트웨어를 디바이스 드라이버라고 한다. <br>
하드웨어는 커널과 직접 연결되기도 하고 하드웨어 제작자가 제공하는 드라이버를 통해 연결되기도 한다. <br>

## 3. 커널의 구성
커널이 주로 하는 일은 프로세스 관리, 메모리 관리, 파일 시스템 관리, 입출력 관리, 프로세스 간 통신(*Inter-Process Communication, IPC*) 관리가 있다. <br>
|핵심 기능|설명|
|---|---|
|프로세스 관리|프로세스에 CPU를 배분하고 작업에 필요한 제반 환경을 제공한다.|
|메모리 관리|프로세스에 작업 공간을 배치하고 실제 메모리보다 큰 가상공간을 제공한다.|
|파일 시스템 관리|데이터를 저장하고 접근할 수 있는 인터페이스를 제공한다.|
|입출력 관리|필요한 입력과 출력 서비스를 제공한다.|
|프로세스 간 통신 괸리|공동 작업을 위한 각 프로세스 간 통신 환경을 지원한다.|
<br>
커널은 이러한 기능을 어떻게 구현하는가에 따라 단일형 구조 커널, 계층형 구조 커널, 마이크로 구조 커널로 구분된다. <br>

### 3.1 단일형 구조 커널
단일형 구조(*monolithic architecture*) 커널은 초창기의 운영체제 구조로, 커널의 핵심 기능을 구현하는 모듈들이 구분 없이 하나로 구성되어 있다. 단일형 구조에 속하는 대표적인 운영체제는 MS-DOS, VMS, 초기의 유닉스 운영체제이다. <br>
단일형 구조는 다음과 같은 장단점을 가지고 있다. <br>

**장점** <br>
- 모듈이 거의 분리되지 않았기 때문에 모듈 간의 통신 비용이 줄어들어 효율적인 운영이 가능하다. 프로그램에서 main()에 모든 기능을 넣으면 함수를 호출하는 오버헤드가 없어서 프로그램이 빨라지는 것과 같은 이치이다. <br>

**단점** <br>
- 모든 모듈이 하나라 묶여 있기 때문에 버그나 오류를 처리하기가 어렵다.
- 운영체제의 여러 기능이 서로 연결되어 있어 상호 의존성이 높기 때문에 기능상의 작은 결함이 시스템 전체로 확산될 수 있다.
- 다양한 환경의 시스템에 적용하기 어렵다. 여러 종류의 컴퓨터에 이식하려면 수정이 필요한데 단일형 구조에서는 수정이 어렵기 때문에 이식성이 낮다.
- 현대의 운영체제는 매우 크고 복잡하기 때문에 완전 단일형 구조의 운영체제를 구현하기가 어렵다.
<br>

### 3.2 계층형 구조 커널
계층형 구조(*layered architecture*) 커널은 단일형 구조 커널이 발전된 형태로, 비슷한 기능을 가진 모듈을 묶어서 하나의 계층으로 만들고 계층 간의 통신을 통해 운영체제를 구현하는 방식이다. 비슷한 기능을 모아 모듈화했기 때문에 단일형 구조보다 버그나 오류를 쉽게 처리할 수 있다. 오류가 발생했을 때 전체 커널을 고치는 것이 아니라 해당 계층만 따로 수정하면 되기 때문에 디버깅(*debugging*)하기도 쉽다. <br>

### 3.3 마이크로 구조 커널
계층형 구조 커널의 운영체제는 다양한 하드웨어와 사용자의 요규를 수용하기 위해 계속 계층과 기능을 추가햇다. 그래서 커널의 크기가 계속 커지고 필요한 하드웨어 용량이 늘어났으며, 커널 소스가 방대해짐에 따라 오류를 잡기도 어려워졌다. 이러한 계층형 구조의 접근 방식과 반대로 개발된 커널이 마이크로 구조(*micro architecture*) 커널이다. <br>
마이크로 구조 커널의 운영체제는 프로세스 관리, 메모리 관리, 프로세스 간 통신 관리 등 가장 기본적인 기능만 제공한다. 커널의 구조를 살펴보면 다른 커널에 비해 운영체제의 많은 부분이 사용자 영역에 구현되어 있다. 커널은 메모리 관리와 프로세스 간의 동기화 서비스를 제공하며, 메모리 관리자와 동기화 모듈은 프로세스 간 통신 모듈로 연결되어 있다. 그러므로 각 모듈은 세분화되어 모듈 간의 정보 교환은 프로세스 간 통신을 이용하여 이루어진다. <br>
마이크로 구조에서 각 모듈은 독립적으로 작동하기 때문에 하나의 모듈이 실패하더라도 전체 운영체제가 멈추지 않는다. 또한 많은 컴퓨터에 이식하기 쉽고 커널이 가벼워 CPU 용량이 작은 시스템에도 적용이 가능하다. <br>

## 4. 가상머신
가상머신은 운영체제와 응용 프로그램 사이에서 작동하는 프로그램으로, 가상머신을 설치하면 응용 프로그램이 모두 동일한 환경에서 작동하는 것처럼 보인다. 따라서 개발자가 하나의 코드만 만들면 여러 운영체제에서 똑같이 실행할 수 있다. 자바는 유닉스와 윈도우에서 작동하는 다양한 가상머신을 만들어 배포하는데 이를 자바 가상머신(*JAVA Virtual Machine, JVM*) 이라고 한다. <br>
가상머신을 사용하면 호환성이 높아지지만 응용 프로그램이 가상머신을 통해서만 작동하기 때문에 느려진다는 단점도 있다.

