---
layout: post
title: “OperatingSystem Overview”
date: 2022-08-08 12:30:00 +0530
categories: OS OperatingSystem Overview
---

<br>

##운영체제 개요
프로그램이 하는 일: 명령어를 실행하고 프로세스는 명령어를 초당 수십억씩 반입(fetch)하고, 해석(decode)하고, 실행(execute)한다.
명령어 작업을 완료한 후 프로세서는 다음 명령어로, 또 그 다음 명령어로 프로그램이 완전히 종료될 때까지 실행을 계속한다. <br>

이것이 **Von Neumann**의 컴퓨터 모델의 기초이다. <br>

운영체제(*Operating System, OS*)란 프로그램을 쉽게 실행하고, 프로그램 간의 메모리 공유를 가능케 하고, 장치와 상호작용을 가능케하고, 다양한 일을 할 수 있게 하는 소프트웨어이다. <br>

운영체제는 이러한 일을 하기위해 가상화(*Virtualization*)라는 기법을 사용한다. 
운영체제는 프로세서, 메모리, 디스크와 같은 물리적(*Physical*)인 자원을 이용하여 일반적이고, 강력하고, 사용이 편리한 가상(*Virtual*)형태의 자원을 생성한다. 때문에 운영체제를 때로는 가상 머신(*Virtual Machine*)이라고 부른다.
사용자 프로그램의 프로그램 실행, 메모리 할당, 파일 접근과 같은 가상 머신과 관한 기능들을 운영체제에 요청할 수 있도록, 운영체제는 사용자에게 API를 제공한다. 보통 운영체제는 응용 프로그램이 사용 가능한 수백 개의 **시스템 콜**을 제공한다. 운영체가 프로그램 실행, 메모리와 장치에 접근, 기타 이와 관련된 여러 작업을 진행하기 위해 이러한 시스템 콜을 제공하기 때문에, 운영체제가 표준 라이브러리(*standard library*)를 제공한다고 일컫기도 한다. <br>

가상화는 많은 프로그램들이 CPU를 공유하여, 동시에 실행될 수 있게 한다. 프로그램들이 각자 명령어와 데이터를 접근할 수 있게 하며 디스크 등의 장치를 공유할 수 있게 한다.
이러한 이유로 운영체제는 **자원 관리자(*resouce manager*)**라고도 불린다. CPU, 메모리, 및 디스크는 시스템의 자원이다. 효율적으로 공정하게, 이들 자원을 관리하는 것이 운영체제의 역할이다.

##CPU 가상화
그림 2.1의 프로그램이 하는 일은 Spin()을 호출하는 것이다. Spin()은 1초 동안 실행된 후 리턴하는 함수이다. 그런 후 사용자가 명령어 라인으로 전달한 문자열을 출력한다. 이러한 일련의 작업을 무한히 반복한다. <br>

이 코드를 cpu.c라는 이름으로 저장하고 단일 프로세서(*CPU*) 시스템에서 컴파일하고 실행시키면 다음과 같은 출력을 볼 수 있다.

**그림2.1 반복해서 출력하는 코드(cpu.c)** <br>

```C
#include <stdio.h>
#include <stdlib.h>
#include <sys/tim.h>
#include <assert.h>
// #include "common.h"
int
main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "usage: cpu <string>\n");
        exit (1);
    }
    char *str = argv[1];
    while (1) {
        Spin(1);
        printf("%s\n", str);
    }
    return 0;
}
```

![cpu_1](/../image/ostep/cpu_1.png)
![cpu_2](/../image/ostep/cpu_2.png)

시스템은 프로그램 실행 후 1초가 지나면 사용자가 전달한 입력 문자열을 출력한다. 출력 후 실행을 계속한다. 이때 프로그램은 계속 실행된다.<br>
그림 2.2에서는 같은 작업에 대한 여러 인스턴스를 동시에 실행시켰다.
프로세서가 하나밖에 없음에도 프로그램 4개 모두 동시에 실행되는 것처럼 보인다. 하드웨어의 도움을 받아 운영체제가 시스템에 수많은 가상 CPU가 존재하는 듯한 환상(*illusion*)을 만들어 냈다.
하나의 CPU 또는 소규모 CPU 집합을 무한개의 CPU가 존재하는 것처럼 변환하여 동시에 많은 수의 프로그램을 실행시키는 것을 CPU 가상화(*virtualizing the CPU*)라 한다. <br>

프로그램을 실행하고, 멈추고, 어떤 프로그램을 실행시킬 것인가를 운영체제에게 알려주기 위해서는 원하는 바를 운영체제에 전달할 수 있는 인터페이스(*API*)가 필요하다. 
API는 운영체제와 사용자가 상호작용할 수 있는 주된 방법이다. <br>

다수의 프로그램을 동시에 실행시킬 수 있는 기능은 새로운 종류의 문제를 발생시킨다. 특정 순가에 두 개의 프로그램이 실행되기를 원한다면, 누가 실행되어야 하는가?
이 질문은 운영체제의 정책(*policy*)에 달려있다. 운영체제가 구현한 동시에 다수의 프로그램을 실행시키는 **기본적인 기법(_mechanism_)**인 **자원 관리자**로서의 운영체제의 역할을 확인해볼 수 있다.

 
출처: 운영체제 아주쉬운 세 가지 이야기(도서출판 홍릉)